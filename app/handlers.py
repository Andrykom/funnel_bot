from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command , ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import Message, ChatJoinRequest, ChatMemberLeft, ContentType, ChatMemberUpdated, PollAnswer, FSInputFile, CallbackQuery, Poll
import app.database.requests as rq
import app.ex as tabl
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from app.keyboards import vid1, vid2, vid3, admin, menu, ease_link_kb, comeback, poisk, statistik, question, question2, asdd, rb_1, rb_2, rb_3, rb_4, rb_5, rb_6, rb_7, proity, first_poll, rb_10, rb_8, rb_9
from aiogram.methods import SendPoll
import openpyxl
import asyncio
import time
import threading
from threading import Thread
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from config import BOT_TOKEN, CHANNEL_ID  # –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞
import os
from app.config import MEDIA_PATH, VIDEOS
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
ANS1 = {'0' : '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', '1': '–ù–µ –∑–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç', '2': '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ü–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ', '3': '–Ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –æ—à–∏–±–∫–µ', '4': '–î—Ä—É–≥–æ–µ(–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏!)'}
ANS2 = {'0' : '–î–∞', '1': '50/50, –Ω–µ —É–≤–µ—Ä–µ–Ω', '2': '–ù–µ –æ—á–µ–Ω—å', '3': '–ù–µ—Ç'}
ANS3 = {'0' : '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', '1': '1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '2': '–†–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å', '3': '–ù–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª'}

ANS4 = {'0' : '–ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ–º–µ', '1': '–ò–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–æ–≤–æ—Å—Ç—è–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', '2': '–£–∑–Ω–∞–ª –æ—Ç –¥—Ä—É–≥–∞/–∫–æ–ª–ª–µ–≥–∏', '3': '–ü—Ä–æ—Å—Ç–æ —Ä–µ—à–∏–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'}
ANS5 = {'0' : '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '1': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∏ –∫–æ–Ω–∫—É—Ä—Å—ã', '2': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–∞–º', '3': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã'}
ANS6 = {'0' : '–í–∏–¥–µ–æ –∏ –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã', '1': '–ö—Ä–∞—Ç–∫–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã', '2': '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞', '3': '–û–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å'}
ANS7 = {'0' : '–ù–æ–≤–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥—ã –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏', '1': '–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '2': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', '3': '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏'}
ANS8 = {'0' : '–ü–æ—Å—Ç—ã —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π', '1': '–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞', '2': '–í–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏', '3': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –≥—Ä–∞—Ñ–∏–∫–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã'}
ANS9 = {'0' : '–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Å—Ç–∞—Ç—å–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '1': '–î–∞, —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö', '2': '–í–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –ª–µ–≥–∫–æ —É—Å–≤–∞–∏–≤–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '3': '–ù–µ—Ç, –º–µ–Ω—è –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏'}
ANS10 = {'0' : '–ü–æ–ª—É—á–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã', '1': '–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏', '2': '–ò—Å–∫–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞', '3': '–û–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º'}
ANS11 = {'0' : ' 0-500$', '1': '500-1000$', '2': '1000-1500$', '3': '–±–æ–ª—å—à–µ 2000$'}
ANS12 = {'0' : '–í –ø–ª—é—Å–µ', '1': ' –í –º–∏–Ω—É—Å–µ', '2': '–¢–æ—Ä–≥—É—é –≤ –±–µ–∑—É–±—ã—Ç–æ–∫'}
ANS13 = {'0' : '–î–∞, –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞) –∫—É—Ä—Å—ã –∏–ª–∏ –ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ', '1': '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏—Å–∫–∞–ª(–∞) –∏ –∏–∑—É—á–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª—ã'}

ADMIN = [987762906,7367627953]
USER_ADMIN = []
class MyForm(StatesGroup):
    message = State()
    opros1 = State()
    opros2 = State()
    opros3 = State()
    opros4 = State()
    opros5 = State()
    opros6 = State()
    opros7 = State()
    opros8 = State()
    opros9 = State()
    opros10 = State()
    opros11 = State()
    opros12 = State()
    opros13 = State()
    opros14 = State()
    gd = State()
    ans = State()
    user_username = State()
    idd = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
async def get_bot():
    return Bot(token=BOT_TOKEN)

def run_async(coro):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(coro)
    finally:
        loop.close()

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å)
MEDIA_PATH = os.path.join(os.path.dirname(__file__), '..', 'media')

def msg6(id: int):
    async def _msg6():
        bot = await get_bot()
        try:
            logger.info(f"Trying to send video from: {VIDEOS['welcome']}")
            
            if not os.path.exists(VIDEOS["welcome"]):
                logger.error(f"Video file not found at: {VIDEOS['welcome']}")
                raise FileNotFoundError("Video file not found")
                
            video = FSInputFile(VIDEOS["welcome"])
            await bot.send_video_note(
                chat_id=id,
                video_note=video,
                reply_markup=proity
            )
            
        except Exception as e:
            logger.error(f"Error in msg6: {e}")
            await bot.send_message(
                chat_id=id,
                text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
                reply_markup=proity
            )
        finally:
            await bot.session.close()
    
    run_async(_msg6())

# –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
def check_video_file():
    if not os.path.exists(VIDEOS["welcome"]):
        logger.warning(f"Video file not found at startup: {VIDEOS['welcome']}")
    else:
        logger.info(f"Video file found at: {VIDEOS['welcome']}")

def msg1(id: int):
    async def _msg1():
        bot = await get_bot()
        try:
            await bot.send_photo(
                chat_id=id, 
                photo="https://ibb.co/Q9mbkLf", 
                caption='<b>–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –û–î–ù–û–ì–û –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</b>\r\n\r\n' +
                       'üî•–ó–∞–ø–∏—Å–∞–ª –¥–ª—è –≤–∞—Å –æ–±—É—á–∞—é—â–∏–π —Ä–æ–ª–∏–∫ \r\n\r\n'+
                       '–° –ø–æ–ª–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–º–±–∞–ª–∞–Ω—Å–æ–≤ –∏ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\r\n\r\n',
                parse_mode='HTML',
                reply_markup=vid2
            )
        except Exception as e:
            print(f"Error in msg1: {e}")
        finally:
            await bot.session.close()
    
    run_async(_msg1())

async def msg2(id: int):
    bot = await get_bot()
    try:
        await bot.send_message(
            chat_id=id, 
            text='<b>–°–æ–≤–µ—Ç –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º —Ä—ã–Ω–∫–µ</b>\r\n\r\n' +
'–≠—Ç–æ –∞—Å–ø–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞—é—Ç –í–°–ï —Å–º–∞—Ä—Ç-–º–∞–Ω–∏ —Ç—Ä–µ–π–¥–µ—Ä—ã, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ —á–∞—Å—Ç–æ –µ–≥–æ —É–ø—É—Å–∫–∞—é—Ç. \r\n\r\n'+
'–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–æ–π.\r\n\r\n'+
'–ò –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏.\r\n\r\n'
, parse_mode='HTML', reply_markup=vid1)
    except Exception as e:
        print(f"Error in msg2: {e}")
    finally:
        await bot.session.close()
    
async def msg3(id: int):
    bot = await get_bot()
    try:
        await bot.send_photo(chat_id=id, photo="https://ibb.co/RDFLdVT", caption='<b>–ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç $5 000 –≤ –º–µ—Å—è—Ü</b>\r\n\r\n' +
'–≠—Ç–æ –≤–∏–¥–µ–æ —Ä–µ—à–∏—Ç –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ\r\n\r\n'+
'–ó–Ω–∞–µ—à—å, –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤? –û–Ω–∏ —Å–ª–∏—à–∫–æ–º –≤—Å–µ —É—Å–ª–æ–∂–Ω—è—é—Ç\r\n\r\n'+
'–ü–æ—ç—Ç–æ–º—É —è –∑–∞–ø–∏—Å–∞–ª –¥–ª—è –≤–∞—Å –≤–∏–¥–µ–æ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ–∫–µ\r\n\r\n' 
, parse_mode='HTML', reply_markup=vid2)
    except Exception as e:
        print(f"Error in msg3: {e}")
    finally:
        await bot.session.close()
    
async def msg4(id: int):
    bot = await get_bot()
    try:
        await bot.send_photo(chat_id=id, photo="https://ibb.co/xHNThgQ", caption='<b>–Ø –±—ã —Ö–æ—Ç–µ–ª –∑–Ω–∞—Ç—å –≠–¢–û, –∫–æ–≥–¥–∞ –±—ã–ª –ù–û–í–ò–ß–ö–û–ú</b>\r\n\r\n' +
'–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –¥–æ–ø—É—Å–∫–∞—é—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –æ—à–∏–±–∫–∏\r\n\r\n'+
'–ò –µ—Å–ª–∏ –±—ã —è —É–∑–Ω–∞–ª —Ä–∞–Ω—å—à–µ –æ —Å–æ–≤–µ—Ç–∞—Ö –∏–∑ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ, —Ç–æ –¥–æ–±–∏–ª—Å—è –±—ã —É—Å–ø–µ—Ö–∞ –≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ!\r\n\r\n'
, parse_mode='HTML', reply_markup=vid2)
    except Exception as e:
        print(f"Error in msg4: {e}")
    finally:
        await bot.session.close()
    
async def msg5(id: int):
    bot = await get_bot()
    try:
        await bot.send_photo(chat_id=id, photo="https://ibb.co/q51ftN9", caption='<b>–ö–∞–∫ —è —Å–¥–µ–ª–∞–ª 10.000$ –ó–ê –ú–ï–°–Ø–¶ –Ω–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ</b>\r\n\r\n'
, parse_mode='HTML', reply_markup=vid2)
    except Exception as e:
        print(f"Error in msg5: {e}")
    finally:
        await bot.session.close()
        

@router.chat_join_request()
async def start1(chat_join_request: ChatJoinRequest, bot: Bot, state: FSMContext):
    # —Ç—É—Ç –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —é–∑–µ—Ä–∞ –≤ –∫–∞–Ω–∞–ª
    await state.clear()
    await rq.set_user(chat_join_request.from_user.id, chat_join_request.from_user.username)
    try:
        await chat_join_request.approve()
        await bot.send_photo(chat_id=chat_join_request.from_user.id, photo="https://ibb.co/zNNgCvw", caption='<b>–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –ª—É—á—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –≤ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ ‚Äì Crypto Volium ü§ù</b>\r\n\r\n' +
		    '<b>–ö–∞–Ω–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π,</b> —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.\r\n\r\n' +
                    '–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –∏–∑—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –≤ <a href="https://t.me/c/1962837464/800">—ç—Ç–æ–º –ø–æ—Å—Ç–µ</a> üëà.\r\n\r\n' +
                    'üí¨ –¢–∞–∫ –∂–µ —É –Ω–∞—Å –µ—Å—Ç—å <a href="whttps://t.me/CRYPTO_VOLIUM_CHAT">–ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç</a>, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\r\n\r\n' +
		    '–ú–µ—Ç–æ–¥–∏—á–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "–ß–µ—Ä–µ–ø–∞—à–∏–π –°—É–ø" —Å –≤–∏–Ω—Ä–µ–π—Ç–æ–º 74%: <a href="https://t.me/c/1962837464/860">—Å—Å—ã–ª–∫–∞</a> üìö\r\n\r\n' +
		    'üìå –°—Ä–∞–∑—É –ø–æ—Å—Ç–∞–≤—å –∫–∞–Ω–∞–ª –≤ –∑–∞–∫—Ä–µ–ø –∏ –≤–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ.', parse_mode='HTML')
        await rq.set_user(chat_join_request.from_user.id, chat_join_request.from_user.username)
        await bot.send_message(CHANNEL_ID, f'–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ @{chat_join_request.from_user.username} –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å')

      #  await bot.send_video_note(id, video_note="DQACAgIAAxkBAAIv8GdEqupmtUzkcqI1ETO68eXNqXgKAALaWgAChbSpSSwnR-Zse7Q9NgQ", reply_markup=proity)
     #   await bot.send_photo(chat_join_request.from_user.id, photo="https://ibb.org.ru/1/fEZDZ3", caption='–ü—Ä–∏–≤–µ—Ç, —Ç—Ä–µ–π–¥–µ—Ä! üöÄ\n–ü–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å, –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —á—Ç–æ–±—ã —Ç—ã –ø–æ–ª—É—á–∏–ª –µ—â–µ –±–æ–ª—å—à–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.\n\nüéÅ–ó–∞ —Ç–≤–æ—é –ø–æ–º–æ—â—å, —Ç—ã –ø–æ–ª—É—á–∏—à—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ SMT-–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –µ—â—ë –≥–ª—É–±–∂–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–µ–µ. üìà(–æ–±—ã—á–Ω–æ $49)\n\n–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏ –≤–Ω–µ—Å–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n–í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º –¥–æ—Å—Ç–∏—á—å –±–æ–ª—å—à–µ–≥–æ!', reply_markup=proity)
    except:
        pass
    id =  chat_join_request.from_user.id
   # time.sleep(120)
   # await bot.send_video_note(id, video_note="DQACAgIAAxkBAAIv8GdEqupmtUzkcqI1ETO68eXNqXgKAALaWgAChbSpSSwnR-Zse7Q9NgQ", reply_markup=proity)
    
    scheduler = AsyncIOScheduler(
        jobstores={
            'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')
        }
    )
    
    # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    scheduler.add_job(
        msg6, 
        trigger='date',
        run_date=datetime.now() + timedelta(seconds=1),#–±—ã–ª–æ 120
        kwargs={'id': id}
    )
    
    scheduler.add_job(
        msg1,
        trigger='date',
        run_date=datetime.now() + timedelta(seconds=86400),
        kwargs={'id': id}
    )
    
    scheduler.add_job(
        msg2,
        trigger='date',
        run_date=datetime.now() + timedelta(seconds=86400*2),
        kwargs={'id': id}
    )
    
    scheduler.add_job(
        msg3,
        trigger='date',
        run_date=datetime.now() + timedelta(seconds=86400*3),
        kwargs={'id': id}
    )
    
    scheduler.add_job(
        msg4,
        trigger='date',
        run_date=datetime.now() + timedelta(seconds=86400*4),
        kwargs={'id': id}
    )
    
    scheduler.add_job(
        msg5,
        trigger='date',
        run_date=datetime.now() + timedelta(seconds=86400*5),
        kwargs={'id': id}
    )
    
    scheduler.start()



@router.callback_query(F.data == 'rrr')
async def proit(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id, '')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "1.–ß—Ç–æ –ø–æ–±—É–¥–∏–ª–æ –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ?", reply_markup=rb_1())


@router.callback_query(F.data[:4] == 'new_', MyForm.opros6)
async def pols_2(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans2=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "3.–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –≤ –≥—Ä—É–ø–ø–µ?", reply_markup=rb_3())
    await state.set_state(MyForm.opros7)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '77777777'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_2: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    
@router.callback_query(F.data[:4] == 'new_', MyForm.opros7)
async def pols_3(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans3=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "4.–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?", reply_markup=rb_4())
    await state.set_state(MyForm.opros8)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '7777777'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_3: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    
@router.callback_query(F.data[:4] == 'new_', MyForm.opros8)
async def pols_4(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans4=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "5.–ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞—é—Ç —É –≤–∞—Å –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–µ—Å?", reply_markup=rb_5())
    await state.set_state(MyForm.opros9)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '777777'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_4: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    
    
@router.callback_query(F.data[:4] == 'new_', MyForm.opros9)
async def pols_5(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans5=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "6.–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ª–∏ –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è?", reply_markup=rb_6())
    await state.set_state(MyForm.opros10)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '77777'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_5: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    


@router.callback_query(F.data[:4] == 'new_', MyForm.opros10)
async def pols_6(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans6=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '7777'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_6: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    await bot.send_message(callback.from_user.id, "7.–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç–µ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ?", reply_markup=rb_7())
    await state.set_state(MyForm.opros11)
    
@router.callback_query(F.data[:4] == 'new_', MyForm.opros11)
async def pols_7(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans7=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '777'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_7: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    await bot.send_message(callback.from_user.id, "8.–ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–æ—Ö–æ–¥?  (*—ç—Ç–æ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –Ω–∞–º–∏)", reply_markup=rb_8())
    await state.set_state(MyForm.opros12)
    
@router.callback_query(F.data[:4] == 'new_', MyForm.opros12)
async def pols_8(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans8=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '77'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_8: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    await bot.send_message(callback.from_user.id, "9.–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏?", reply_markup=rb_9())
    await state.set_state(MyForm.opros13)
    
@router.callback_query(F.data[:4] == 'new_', MyForm.opros13)
async def pols_9(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans9=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '7'
    try:
        await rq.set_q(callback.from_user.id, 5, q5)
    except Exception as e:
        print(f"Error in pols_9: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    await bot.send_message(callback.from_user.id, "10.–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É?", reply_markup=rb_10())
    await state.set_state(MyForm.opros14)
    
    
@router.callback_query(F.data[:4] == 'new_', MyForm.opros14)
async def pols_10(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    try:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
    except:
        pass
    await state.update_data(ans10=callback.data[4:])
    try:
        data = await state.get_data()
        q5 = ''
        for i in data:
            q5 += str(data[i])
        await rq.set_q(callback.from_user.id, 5, q5)
        ans = str(f'<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{callback.from_user.username} <i>–ß—Ç–æ –ø–æ–±—É–¥–∏–ª–æ –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ?:</i> {ANS4[q5[0]]}\n<i>–ß—Ç–æ –º–æ–≥–ª–æ –±—ã –ø–æ–±—É–¥–∏—Ç—å –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?:</i> {ANS5[q5[1]]}\n<i>–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –≤ –≥—Ä—É–ø–ø–µ?:</i> {ANS6[q5[2]]}\n<i>–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?:</i> {ANS7[q5[3]]}\n<i>–ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞—é—Ç —É –≤–∞—Å –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–µ—Å?:</i> {ANS8[q5[4]]}\n<i>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ª–∏ –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è?:</i> {ANS9[q5[5]]}\n<i>–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç–µ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ?:</i> {ANS10[q5[6]]}\
\n–ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–æ—Ö–æ–¥?  (*—ç—Ç–æ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –Ω–∞–º–∏) : {ANS11[q5[7]]}\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ : {ANS12[q5[8]]}\n–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É? : {ANS13[q5[9]]}')
        await rq.set_opros2(callback.from_user.id, ans)
        print(ans)
        await bot.send_document(callback.from_user.id, document=FSInputFile('–ú–µ—Ç–æ–¥–∏—á–∫–∞ SMT –æ—Ç Crypto Volium 2.pdf'), caption='–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—à—å –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!')
        await rq.set_opros(callback.from_user.id, ans)
        await bot.send_message(CHANNEL_ID, text=ans, parse_mode='HTML')
    except:
        pass
    await state.clear()
 


@router.callback_query(F.data[:4] == 'new_')
async def pols_1(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(ans1=callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "2.–ß—Ç–æ –º–æ–≥–ª–æ –±—ã –ø–æ–±—É–¥–∏—Ç—å –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?", reply_markup=rb_2())
    await state.set_state(MyForm.opros6)
    data = await state.get_data()
    q5 = ''
    for i in data:
        q5 += str(data[i])
    q5 += '777777777'
    await rq.set_q(callback.from_user.id, 5, q5)    


@router.callback_query(F.data == 'get_channel')
async def exc(callback: CallbackQuery, bot: Bot, state: FSMContext):
    try:
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await callback.answer('–§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
        
        # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º await –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ loop
        await tabl.st()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.answer('–ß–µ—Ç–µ–Ω—å–∫–æ')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.send_document(
            callback.from_user.id, 
            document=FSInputFile('data.xlsx'), 
            caption='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        )
        
    except Exception as e:
        logger.error(f"Error in exc: {e}")
        await callback.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert=True)




@router.callback_query(F.data == 'frst_poll')
async def frst_poll(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id, '–ë–´—Å—Ç—Ä–æ –±–ª–µ–∞—Ç')
    for i in (await rq.get_users()):
        try: 
  
            await bot.send_photo(i[0], photo="https://ibb.org.ru/1/fEZDZ3" ,caption='–ü—Ä–∏–≤–µ—Ç, —Ç—Ä–µ–π–¥–µ—Ä! üöÄ\n–ü–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å, –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —á—Ç–æ–±—ã —Ç—ã –ø–æ–ª—É—á–∏–ª –µ—â–µ –±–æ–ª—å—à–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.\n\nüéÅ–ó–∞ —Ç–≤–æ—é –ø–æ–º–æ—â—å, —Ç—ã –ø–æ–ª—É—á–∏—à—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ SMT-–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –µ—â—ë –≥–ª—É–±–∂–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–µ–µ. üìà (–æ–±—ã—á–Ω–æ $49)\n\n–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏ –≤–Ω–µ—Å–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n–í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º –¥–æ—Å—Ç–∏—á—å –±–æ–ª—å—à–µ–≥–æ!', reply_markup=proity)
        except:
            print(i)   
    await state.clear() 


@router.message(F.text == 'admin')
async def admin2(message: Message, bot: Bot, state: FSMContext):
    if message.from_user.id in ADMIN or message.from_user.username in USER_ADMIN:
        await bot.send_message(message.from_user.id, 'üîª–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ø–æ–≤—ç–ª–∏—Ç–µ–ª—åüî∫', reply_markup=ease_link_kb())
    else:
        await bot.send_message(message.from_user.id, '–ö—É–¥–∞ –ª–µ–∑–µ—à—å —â–µ–Ω–æ–∫')


@router.callback_query(F.data == 'panda')
async def qr1(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id, '–ï–ë–û–û–û–û–®–¨ –ü–û –í–°–ï–ú....')
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=first_poll())
    await state.set_state(MyForm.message)


@router.callback_query(F.data == 'zapros')
async def qr2(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id, '–ß—Ç–æ –∂–µ –æ–Ω —Ç–∞–º –ø—Ä—è—á–µ—Ç?....')
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–≤—ç–ª–∏—Ç–µ–ª—åüåë', reply_markup=poisk())

@router.callback_query(F.data == 'search_username')
async def qr3(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id, ':)')
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @', reply_markup=comeback)
    await state.set_state(MyForm.user_username)
    
@router.callback_query(F.data == 'search_id')
async def qr4(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id, ':)')
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=comeback)
    await state.set_state(MyForm.idd)
    
@router.callback_query(F.data == 'menu_opsros')
async def qr5(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id, '—Ç—ã —á–µ —ç–∫—Å–µ–ª—å')
    await callback.message.answer(f'–æ–ø–∞ –æ–ø–∞ –æ–ø–∞–ø–∞', reply_markup=statistik())

@router.callback_query(F.data == 'get_res')
async def qr6(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id, '–Ω—É —Å–º–æ—Ç—Ä–∏—Ü–µ')
    ans = [[-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1]]
    ans[0][4] = (await rq.get_q(1, 4))[0][0]
    for i in range(1, 4):
        for j in range(0, 4):
            ans[i - 1][j] = (await rq.get_q(i, j))[0][0]
    await bot.send_document(callback.from_user.id, document=FSInputFile('test.txt'), caption='–û—Ç–≤–µ—Ç—ã: –î–†–£–ì–û–ï')
    await bot.send_document(callback.from_user.id, document=FSInputFile('ans.txt'), caption='–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –≤ Crypto Volium')
    await bot.send_message(callback.from_user.id, f'–ü–æ–∫–∏–Ω—É–ª–∏ Crypto Volium –ø–æ—Ç–æ–º—É, —á—Ç–æ\n---–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:{ans[0][0]}\n---–ù–µ –∑–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç: {ans[0][1]}\n---–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ü–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {ans[0][2]}\n\
---–Ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –æ—à–∏–±–∫–µ: {ans[0][3]}\n---–î—Ä—É–≥–æ–µ: {ans[0][4]}\n–ë—ã–ª –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª–µ–∑–µ–Ω:\n---–î–∞: {ans[1][0]}\n---50/50: {ans[1][1]}\n---–ù–µ –æ—á–µ–Ω—å: {ans[1][2]}\n---–ù–µ—Ç: {ans[1][3]}\n\
–ß–∞—Å—Ç–æ –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º:\n---–ö–∞–∂–¥—ã–π –¥–µ–Ω—å: {ans[2][0]}\n---1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é: {ans[2][1]}\n---–†–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å: {ans[2][2]}\n---–ù–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª: {ans[2][3]}\n', reply_markup=comeback)
    
@router.callback_query(F.data == 'get_ser')
async def qr7(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id, '–Ω—É —Å–º–æ—Ç—Ä–∏—Ü–µ')
    ans = [[0] * 4 for i in range(10)]
    q5 = await rq.get_ans1()
    el = ''
    arr = []
    for i in q5:
        if i[0] != '–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–ª':
            el += str(i[0])
    print(el)
    for j in range(10):
        ex = ''
        for i in range(j, len(el), 10):
            ex += el[i]
        arr.append(ex)  
    print(arr)
            
    await bot.send_message(callback.from_user.id, f'–ß—Ç–æ –ø–æ–±—É–¥–∏–ª–æ –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ?\n---–ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ–º–µ: {arr[0].count("0")}\n---–ò–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–æ–≤–æ—Å—Ç—è–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {arr[0].count("1")}\n---–£–∑–Ω–∞–ª –æ—Ç –¥—Ä—É–≥–∞/–∫–æ–ª–ª–µ–≥–∏: {arr[0].count("2")}\n\
---–ü—Ä–æ—Å—Ç–æ —Ä–µ—à–∏–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: {arr[0].count("3")}\n–ß—Ç–æ –º–æ–≥–ª–æ –±—ã –ø–æ–±—É–¥–∏—Ç—å –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?:\n---–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {arr[1].count("0")}\n---–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∏ –∫–æ–Ω–∫—É—Ä—Å—ã: {arr[1].count("1")}\n---–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–∞–º: {arr[1].count("2")}\n---–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: {arr[1].count("3")}\n\
–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –≤ –≥—Ä—É–ø–ø–µ?:\n--–í–∏–¥–µ–æ –∏ –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã: {arr[2].count("0")}\n---–ö—Ä–∞—Ç–∫–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã: {arr[2].count("1")}\n---–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤: {arr[2].count("2")}\n---–û–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å: {arr[2].count("3")}\n\
–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?:\n--–ù–æ–≤–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥—ã –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: {arr[3].count("0")}\n---–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {arr[3].count("1")}\n--–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {arr[3].count("2")}\n---–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: {arr[3].count("3")}\n\
–ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞—é—Ç —É –≤–∞—Å –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–µ—Å?:\n--–ü–æ—Å—Ç—ã —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: {arr[4].count("0")}\n---–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞: {arr[4].count("1")}\n--–í–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {arr[4].count("2")}\n---–ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –≥—Ä–∞—Ñ–∏–∫–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã: {arr[4].count("3")}\n\
–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ª–∏ –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è?:\n--–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Å—Ç–∞—Ç—å–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {arr[5].count("0")}\n---–î–∞, —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö: {arr[5].count("1")}\n--–í–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –ª–µ–≥–∫–æ —É—Å–≤–∞–∏–≤–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {arr[5].count("2")}\n---–ù–µ—Ç, –º–µ–Ω—è –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏: {arr[5].count("3")}\n\
–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç–µ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ?:\n--–ü–æ–ª—É—á–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: {arr[6].count("0")}\n---–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏: {arr[6].count("1")}\n--–ò—Å–∫–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞: {arr[6].count("2")}\n---–û–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º: {arr[6].count("3")}\n\
–ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–æ—Ö–æ–¥?  (*—ç—Ç–æ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –Ω–∞–º–∏):\n-- 0-500$: {arr[7].count("0")}\n---500-1000$: {arr[7].count("1")}\n--1000-1500$: {arr[7].count("2")}\n---–±–æ–ª—å—à–µ 2000$ {arr[7].count("3")}\n\
–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏?:\n-- –í –ø–ª—é—Å–µ: {arr[8].count("0")}\n---–í –º–∏–Ω—É—Å–µ: {arr[8].count("1")}\n--–¢–æ—Ä–≥—É—é –≤ –±–µ–∑—É–±—ã—Ç–æ–∫: {arr[8].count("2")}\n\
–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É?:\n--–¥–∞, –ø—Ä–æ—Ö–æ–¥–∏–ª(–∞) –∫—É—Ä—Å—ã –∏–ª–∏ –ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {arr[9].count("0")}\n---–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏—Å–∫–∞–ª(–∞) –∏ –∏–∑—É—á–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {arr[9].count("1")}\n\
   ', reply_markup=comeback)
        
    
    
    

@router.message(MyForm.user_username)
async def mes(message: Message, bot: Bot, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –±–µ–∑ @
        username = message.text.lstrip('@')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å await)
        data = await rq.get_user_by_username(username)
        
        if not data:
            await bot.send_message(
                message.from_user.id, 
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        s = "–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await bot.send_message(
            message.from_user.id, 
            f'üî≤<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>üî≥\n'
            f'<b>Id:</b> <i>{data[1]}</i>\n'
            f'<b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É:</b> <i>{data[2]}</i>\n'
            f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏:</b>\n{data[3]}\n'
            f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π:</b>\n{data[11]}\n\n'
            f'<b>Username:</b> <i>@{data[4]}</i>\n\n'
            f'<b>{s}</b>', 
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in mes handler: {e}")
        await bot.send_message(
            message.from_user.id, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
    finally:
        await state.clear()
    
    
@router.message(MyForm.idd)
async def get_info_by_id(message: Message, bot: Bot, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
        try:
            user_id = int(message.text)
        except ValueError:
            await bot.send_message(
                message.from_user.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await rq.get_user_by_id(user_id)
        
        if not data:
            await bot.send_message(
                message.from_user.id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        s = "–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await bot.send_message(
            message.from_user.id,
            f'üî≤<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>üî≥\n'
            f'<b>Id:</b> <i>{data[1]}</i>\n'
            f'<b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É:</b> <i>{data[2]}</i>\n'
            f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏:</b>\n{data[3]}\n'
            f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π:</b>\n{data[11]}\n\n'
            f'<b>Username:</b> <i>@{data[4]}</i>\n\n'
            f'<b>{s}</b>',
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error in get_info_by_id: {e}")
        await bot.send_message(
            message.from_user.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
    finally:
        await state.clear()

@router.callback_query(F.data == 'back')
async def admin1(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    if callback.from_user.id in ADMIN or callback.from_user.username in USER_ADMIN:
        print('AAAAAAAAAAAAAAAa')
        await bot.answer_callback_query(callback.id, 'I will be comeback....')
        await bot.send_message(callback.from_user.id, 'üî∫–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ø–æ–≤—ç–ª–∏—Ç–µ–ª—åüîª', reply_markup=ease_link_kb())
    else:
        await bot.send_message(callback.from_user.id, '–ö—É–¥–∞ –ª–µ–∑–µ—à—å —â–µ–Ω–æ–∫')
    
       
@router.message(MyForm.message)
async def handle_message_for_broadcast(message: Message, state: FSMContext, bot: Bot):
    if message.text == '1%1':
        pass
    else:
        if message.photo is not None:

            for i in (await rq.get_users()):
                if message.caption is None:
                    d = ''
                else:
                    d = message.caption
                try:
                    await bot.send_photo(i[0], photo=message.photo[0].file_id, caption=f"{d}")
                except:
                    print(i)
        else:
            if message.video_note is not None:
                print(message.video_note.file_id)
                for i in (await rq.get_users()):


                    try:
                        await bot.send_video_note(i[0], video_note=message.video_note.file_id)
                    except:
                        print(i)
            else:
                
                
                for i in (await rq.get_users()):
                    try:
                        await bot.send_message(i[0], f'{message.text}')
                    except:
                        print(i)
        await bot.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ')
    await state.clear()





@router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
async def left_member(event: ChatMemberUpdated, bot: Bot, state: FSMContext):
    try:
        await state.clear()
        await rq.set_leftmember(event.old_chat_member.user.id)
        try:
            await bot.send_message(CHANNEL_ID, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{event.old_chat_member.user.username} —Ä–µ—à–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—Å')
        except:
            pass
        await bot.send_message(event.old_chat_member.user.id, text='–¢—ã —É—à–µ–ª, —Ç–∞–∫ –∏ –Ω–µ –ø–æ–ø—Ä–æ—â–∞–≤—à–∏—Å—å? –ù–∞–ø–∏—à–∏, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ –±—ã —Ç–µ–±–µ —Å—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, –∏–ª–∏ –∂–µ, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –≤–∏–¥–µ—Ç—å —É –Ω–∞—Å –Ω–∞ –∫–∞–Ω–∞–ª–µ. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –¥–∞–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏ —Ç—ã –Ω–∞–º –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –≤ —ç—Ç–æ–º. –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –º–µ—Ç–æ–¥–∏—á–∫—É –∫–æ—Ç–æ—Ä—É—é —è –∏—Å–ø–æ–ª—å–∑—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!')
        await bot.send_message(event.old_chat_member.user.id, '1.–ü–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å Crypto Volium?',
                              reply_markup=question())
        
    except:
        pass

@router.callback_query(F.data[:4] == 'ans_')
async def polfl_answer_1(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await rq.set_q(callback.from_user.id, 1, callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    if callback.data[4:] == '4':
        await state.set_state(MyForm.ans)
        await bot.send_message(callback.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à —É—Ö–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞?")
    else:
        await state.update_data(name=ANS1[callback.data[4:]])
        await bot.send_message(callback.from_user.id, "2.–ë—ã–ª –ª–∏ –ø–æ–ª–µ–∑–µ–Ω –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç?", reply_markup=question2())
        await state.set_state(MyForm.opros2)

@router.callback_query(F.data[:4] == 'var_', MyForm.opros2)
async def poll_answer_2(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await rq.set_q(callback.from_user.id, 2, callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await state.update_data(e=ANS2[callback.data[4:]])
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "3.–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å Crypto Volium?", reply_markup=asdd())
    await state.set_state(MyForm.opros3)



    
@router.callback_query(F.data[:4] == 'coh_', MyForm.opros3)
async def poll_answer_3(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await rq.set_q(callback.from_user.id, 3, callback.data[4:])
    await bot.answer_callback_query(callback.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç')
    await state.update_data(f=ANS3[callback.data[4:]])
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, text='4.–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –≤–∏–¥–µ—Ç—å —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ Crypto Volium?')
    await state.set_state(MyForm.opros4)

@router.message(MyForm.opros4)
async def pool_answer_4(message: Message, state: FSMContext, bot: Bot):
    try:
        ans = message.text
        await rq.set_opros(message.from_user.id, ans)
    except Exception as e:
        print(f"Error in pool_answer_4: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...
    await bot.send_message(message.from_user.id, '–£—Å–ø–µ—à–Ω–æ')
    await state.clear()

@router.message(MyForm.ans)
async def poa(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(name=message.text)
    with open("test.txt", 'a') as myfile:
        myfile.write("\n" + message.text)
        
    await bot.send_poll(message.from_user.id, question='3.–ë—ã–ª –ª–∏ –ø–æ–ª–µ–∑–µ–Ω –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç?',
                                    options=['–î–∞', '50/50, –Ω–µ —É–≤–µ—Ä–µ–Ω', '–ù–µ –æ—á–µ–Ω—å', '–ù–µ—Ç'],   is_anonymous=False)
        
    await state.set_state(MyForm.opros2)

CHANNEL_ID = CHANNEL_ID  # –í–∞—à ID –∫–∞–Ω–∞–ª–∞

async def check_subscription(user_id: int, bot: Bot) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

@router.message(Command("start"))
async def cmd_start(message: Message, bot: Bot):
    is_subscribed = await check_subscription(message.from_user.id, bot)
    if not is_subscribed:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    # –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

@router.message(F.video_note)
async def get_video_note_id(message: Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞"""
    print(f"Video note file_id: {message.video_note.file_id}")